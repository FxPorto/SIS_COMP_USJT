
# Criptografia com Chave Simétrica (AES) usando a biblioteca 'cryptography'
from cryptography.fernet import Fernet

# Geração da chave simétrica
chave = Fernet.generate_key()
cifra = Fernet(chave)

# Mensagem original
mensagem = b"Mensagem secreta com AES (simétrica)"

# Criptografando a mensagem
criptografada = cifra.encrypt(mensagem)
print("Criptografada (AES):", criptografada)

# Descriptografando a mensagem
descriptografada = cifra.decrypt(criptografada)
print("Descriptografada (AES):", descriptografada.decode())

print("\n" + "="*60 + "\n")

# Criptografia com Chave Assimétrica (RSA) usando a biblioteca 'cryptography'
from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import hashes

# Geração das chaves RSA (privada e pública)
chave_privada = rsa.generate_private_key(public_exponent=65537, key_size=2048)
chave_publica = chave_privada.public_key()

# Mensagem original
mensagem_rsa = b"Mensagem sigilosa com RSA (assimétrica)"

# Criptografando com a chave pública
criptografada_rsa = chave_publica.encrypt(
    mensagem_rsa,
    padding.OAEP(
        mgf=padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
    )
)
print("Criptografada (RSA):", criptografada_rsa)

# Descriptografando com a chave privada
descriptografada_rsa = chave_privada.decrypt(
    criptografada_rsa,
    padding.OAEP(
        mgf=padding.MGF1(algorithm=hashes.SHA256()),
        algorithm=hashes.SHA256(),
        label=None
    )
)
print("Descriptografada (RSA):", descriptografada_rsa.decode())

print("\n" + "="*60 + "\n")

# Função Hash (SHA-256) usando hashlib
import hashlib

mensagem_hash = "Exemplo de mensagem para hash"
mensagem_bytes = mensagem_hash.encode()

# Aplicando SHA-256
hash_gerado = hashlib.sha256(mensagem_bytes).hexdigest()

print("Mensagem original:", mensagem_hash)
print("Hash SHA-256:", hash_gerado)
